   152	// WriteAt writes len(b) bytes to the File starting at byte offset off.
   153	// It returns the number of bytes written and an error, if any.
   154	// WriteAt returns a non-nil error when n != len(b).
   155	func (f *File) WriteAt(b []byte, off int64) (n int, err error) {
   156		if f == nil {
   157			return 0, ErrInvalid
   158		}
   159		for len(b) > 0 {
   160			m, e := f.pwrite(b, off)
   161			if e != nil {
   162				err = &PathError{"write", f.name, e}
   163				break
   164			}
   165			n += m
   166			b = b[m:]
   167			off += int64(m)
   168		}
   169		return
   170	}
   171	
   172	// Seek sets the offset for the next Read or Write on file to offset, interpreted
   173	// according to whence: 0 means relative to the origin of the file, 1 means
   174	// relative to the current offset, and 2 means relative to the end.
   175	// It returns the new offset and an error, if any.
   176	func (f *File) Seek(offset int64, whence int) (ret int64, err error) {
   177		r, e := f.seek(offset, whence)
   178		if e == nil && f.dirinfo != nil && r != 0 {
   179			e = syscall.EISDIR
   180		}
   181		if e != nil {
   182			return 0, &PathError{"seek", f.name, e}
   183		}
   184		return r, nil
   185	}